import numpy as np
import pandas as pd
import operator
import os
from collections import OrderedDict
from sklearn.model_selection import train_test_split

def manhattan_distance(x, y):
      return (sum([ abs(a-b) for a, b in zip(x, y) ]))

def mod_standard_score(x):
    x_sorted = np.sort(x)
    card = len(x)
    mean = 0
    if card % 2 == 0:
        mean = (x_sorted[int((card/2)-1)]+x_sorted[int(card/2)]) / 2
    else:
        mean = x_sorted[int(card/2)]
    deviation = sum([ abs(i-mean) for i in x]) / card
    if deviation == 0:
        return [0]*card
    return [(i - mean)/deviation for i in x], mean, deviation
        
def cross_validation(dataset):
	path = "datasets/"+dataset+"_/"

	filelist = os.listdir(path)
		
	class_count = {}
	class_count['Gymnastics'] = [0,0,0]
	class_count['Basketball'] = [0,0,0]
	class_count['Track'] = [0,0,0]
	
	class_t = {}
	class_t['Gymnastics'] = 0
	class_t['Basketball'] = 0
	class_t['Track'] = 0
	
	for test in range(0,10):
		frame = pd.DataFrame()
		list_ = []
		print("Test ", filelist[test])
		for i in range(0,10):
			if test != i:
				df = pd.read_csv(path+filelist[i],index_col=0, header=0,sep='\t')
				list_.append(df)
		frame = pd.concat(list_)
		
		frame['num'], m, d = mod_standard_score(np.array(frame['num']))
		frame['num.1'], m1, d1 = mod_standard_score(np.array(frame['num.1']))
		
		df2 = pd.read_csv(path+filelist[test],index_col=0, header=0,sep='\t')

		for index, row in df2.iterrows():
	
			min_ = 99999
			test_tmp = [(row['num']-m)/d, (row['num.1']-m1)/d1]
			for index_, row_ in frame.iterrows():

				tmp = [row_['num'], row_['num.1']]
				dist = manhattan_distance(tmp, test_tmp)
#				print (row_['class'], dist)
				if(dist < min_):
					min_ = dist
#					print("test ", test_tmp)
#					print("tmp ", tmp)
					res = [row_['class'], dist]
					
			class_t[row['class']] += 1

			if row['class'] == 'Gymnastics':
				if res[0] == 'Gymnastics':
					class_count['Gymnastics'][0] += 1
				if res[0] == 'Basketball':
					class_count['Gymnastics'][1] += 1
				if res[0] == 'Track':
					class_count['Gymnastics'][2] += 1
			if row['class'] == 'Basketball':
				if res[0] == 'Gymnastics':
					class_count['Basketball'][0] += 1
				if res[0] == 'Basketball':
					class_count['Basketball'][1] += 1
				if res[0] == 'Track':
					class_count['Basketball'][2] += 1
			if row['class'] == 'Track':
				if res[0] == 'Gymnastics':
					class_count['Track'][0] += 1
				if res[0] == 'Basketball':
					class_count['Track'][1] += 1
				if res[0] == 'Track':
					class_count['Track'][2] += 1
	test_sum = 0
	c = 0
	col_sum = [0,0,0]
	for i in class_count:
		print(i + '\t\t' + str(class_count[i]))
		test_sum += class_count[i][c]
		col_sum[0] +=  class_count[i][0]
		col_sum[1] +=  class_count[i][1]
		col_sum[2] +=  class_count[i][2]
		c+=1
		
	total_sum = 0
	for i in class_t:
		total_sum += class_t[i]

	ac = test_sum / total_sum
	print("Accuracy: ", ac)

	kappa_count = {}
	kappa_count['Gymnastics'] = [0,0,0]
	kappa_count['Basketball'] = [0,0,0]
	kappa_count['Track'] = [0,0,0]

	for i in kappa_count:
		kappa_count[i][0] = round(( col_sum[0]/total_sum ) * class_t[i])
		kappa_count[i][1] = round(( col_sum[1]/total_sum ) * class_t[i])
		kappa_count[i][2] = round(( col_sum[2]/total_sum ) * class_t[i])
	
	kappa_col = [0,0,0]
	ms = 0
	kappa_sum = 0
	for i in kappa_count:
		print(i + '\t\t' + str(kappa_count[i]))
		kappa_sum += kappa_count[i][ms]
		kappa_col[0] +=  kappa_count[i][0]
		kappa_col[1] +=  kappa_count[i][1]
		kappa_col[2] +=  kappa_count[i][2]
		ms+=1
		
	acc = kappa_sum / sum(kappa_col)
	
	print("Kappa Score: ", (ac - acc) / (1 - acc) )


def cross_validation_iris(dataset):
	path = "datasets/"+dataset+"_/"

	filelist = os.listdir(path)
		
	class_count = {}
	class_count['Iris-setosa'] = [0,0,0]
	class_count['Iris-versicolor'] = [0,0,0]
	class_count['Iris-virginica'] = [0,0,0]
	
	class_t = {}
	class_t['Iris-setosa'] = 0
	class_t['Iris-versicolor'] = 0
	class_t['Iris-virginica'] = 0
	
	for test in range(0,10):
		frame = pd.DataFrame()
		list_ = []
		print("Test ", filelist[test])
		for i in range(0,10):
			if test != i:
				df = pd.read_csv(path+filelist[i], header=0,sep='\t')
				list_.append(df)
		frame = pd.concat(list_)
		
		frame['num'], m, d = mod_standard_score(np.array(frame['num']))
		frame['num.1'], m1, d1 = mod_standard_score(np.array(frame['num.1']))
		frame['num.2'], m2, d2 = mod_standard_score(np.array(frame['num.2']))
		frame['num.3'], m3, d3 = mod_standard_score(np.array(frame['num.3']))

		df2 = pd.read_csv(path+filelist[test], header=0,sep='\t')

		for index, row in df2.iterrows():
	
			min_ = 99999
			test_tmp = [(row['num']-m)/d, (row['num.1']-m1)/d1, (row['num.2']-m2)/d2, (row['num.3']-m3)/d3]
			for index_, row_ in frame.iterrows():

				tmp = [row_['num'], row_['num.1'], row_['num.2'], row_['num.3']]
				dist = manhattan_distance(tmp, test_tmp)
#				print (row_['class'], dist)
				if(dist < min_):
					min_ = dist
					res = [row_['class'], dist]
					
			class_t[row['class']] += 1

			if row['class'] == 'Iris-setosa':
				if res[0] == 'Iris-setosa':
					class_count['Iris-setosa'][0] += 1
				if res[0] == 'Iris-versicolor':
					class_count['Iris-setosa'][1] += 1
				if res[0] == 'Iris-virginica':
					class_count['Iris-setosa'][2] += 1
			if row['class'] == 'Iris-versicolor':
				if res[0] == 'Iris-setosa':
					class_count['Iris-versicolor'][0] += 1
				if res[0] == 'Iris-versicolor':
					class_count['Iris-versicolor'][1] += 1
				if res[0] == 'Iris-virginica':
					class_count['Iris-versicolor'][2] += 1
			if row['class'] == 'Iris-virginica':
				if res[0] == 'Iris-setosa':
					class_count['Iris-virginica'][0] += 1
				if res[0] == 'Iris-versicolor':
					class_count['Iris-virginica'][1] += 1
				if res[0] == 'Iris-virginica':
					class_count['Iris-virginica'][2] += 1
	test_sum = 0
	c = 0
	col_sum = [0,0,0]
	for i in class_count:
		print(i + '\t\t' + str(class_count[i]))
		test_sum += class_count[i][c]
		col_sum[0] +=  class_count[i][0]
		col_sum[1] +=  class_count[i][1]
		col_sum[2] +=  class_count[i][2]
		c+=1
		
	total_sum = 0
	for i in class_t:
		total_sum += class_t[i]
		
	print(class_t)

	ac = test_sum / total_sum
	print("Accuracy: ", ac)

	kappa_count = {}
	kappa_count['Iris-setosa'] = [0,0,0]
	kappa_count['Iris-versicolor'] = [0,0,0]
	kappa_count['Iris-virginica'] = [0,0,0]

	for i in kappa_count:
		kappa_count[i][0] = round(( col_sum[0]/total_sum ) * class_t[i])
		kappa_count[i][1] = round(( col_sum[1]/total_sum ) * class_t[i])
		kappa_count[i][2] = round(( col_sum[2]/total_sum ) * class_t[i])
	
	kappa_col = [0,0,0]
	ms = 0
	kappa_sum = 0
	for i in kappa_count:
		print(i + '\t\t' + str(kappa_count[i]))
		kappa_sum += kappa_count[i][ms]
		kappa_col[0] +=  kappa_count[i][0]
		kappa_col[1] +=  kappa_count[i][1]
		kappa_col[2] +=  kappa_count[i][2]
		ms+=1
		
	acc = kappa_sum / sum(kappa_col)
	
	print("Kappa Score: ", (ac - acc) / (1 - acc) )


def cross_validation_mpg(dataset):
	path = "datasets/"+dataset+"_/"

	filelist = os.listdir(path)
		
	class_count = {}
	class_count['10'] = [0,0,0,0,0,0,0,0]
	class_count['15'] = [0,0,0,0,0,0,0,0]
	class_count['20'] = [0,0,0,0,0,0,0,0]
	class_count['25'] = [0,0,0,0,0,0,0,0]
	class_count['30'] = [0,0,0,0,0,0,0,0]
	class_count['35'] = [0,0,0,0,0,0,0,0]
	class_count['40'] = [0,0,0,0,0,0,0,0]
	class_count['45'] = [0,0,0,0,0,0,0,0]
	
	class_t = {}
	class_t['10'] = 0
	class_t['15'] = 0
	class_t['20'] = 0
	class_t['25'] = 0
	class_t['30'] = 0
	class_t['35'] = 0
	class_t['40'] = 0
	class_t['45'] = 0
	
	for test in range(0,10):
		frame = pd.DataFrame()
		list_ = []
		print("Test ", filelist[test])
		for i in range(0,10):
			if test != i:
				df = pd.read_csv(path+filelist[i],index_col=6, header=0,sep='\t')
				list_.append(df)
		frame = pd.concat(list_)
		
		frame['num'], m, d = mod_standard_score(np.array(frame['num']))
		frame['num.1'], m1, d1 = mod_standard_score(np.array(frame['num.1']))
		frame['num.2'], m2, d2 = mod_standard_score(np.array(frame['num.2']))
		frame['num.3'], m3, d3 = mod_standard_score(np.array(frame['num.3']))
		frame['num.4'], m4, d4 = mod_standard_score(np.array(frame['num.4']))
		
		df2 = pd.read_csv(path+filelist[test],index_col=6, header=0,sep='\t')

		for index, row in df2.iterrows():
	
			min_ = 99999
			test_tmp = [(row['num']-m)/d, (row['num.1']-m1)/d1, (row['num.2']-m2)/d2, (row['num.3']-m3)/d3, (row['num.4']-m4)/d4]
			for index_, row_ in frame.iterrows():

				tmp = [row_['num'], row_['num.1'], row_['num.2'], row_['num.3'], row_['num.4']]
				dist = manhattan_distance(tmp, test_tmp)
				if(dist < min_):
					min_ = dist
					res = [str(int(row_['class'])), dist]
				
			class_t[str(int(row['class']))] += 1

			if str(int(row['class'])) == '10':
				if res[0] == '10':
					class_count['10'][0] += 1
				if res[0] == '15':
					class_count['10'][1] += 1
				if res[0] == '20':
					class_count['10'][2] += 1
				if res[0] == '25':
					class_count['10'][3] += 1
				if res[0] == '30':
					class_count['10'][4] += 1
				if res[0] == '35':
					class_count['10'][5] += 1
				if res[0] == '40':
					class_count['10'][6] += 1
				if res[0] == '45':
					class_count['10'][7] += 1
			if str(int(row['class'])) == '15':
				if res[0] == '10':
					class_count['15'][0] += 1
				if res[0] == '15':
					class_count['15'][1] += 1
				if res[0] == '20':
					class_count['15'][2] += 1
				if res[0] == '25':
					class_count['10'][3] += 1
				if res[0] == '30':
					class_count['15'][4] += 1
				if res[0] == '35':
					class_count['15'][5] += 1
				if res[0] == '40':
					class_count['15'][6] += 1
				if res[0] == '45':
					class_count['15'][7] += 1
			if str(int(row['class'])) == '20':
				if res[0] == '10':
					class_count['20'][0] += 1
				if res[0] == '15':
					class_count['20'][1] += 1
				if res[0] == '20':
					class_count['20'][2] += 1
				if res[0] == '25':
					class_count['20'][3] += 1
				if res[0] == '30':
					class_count['20'][4] += 1
				if res[0] == '35':
					class_count['20'][5] += 1
				if res[0] == '40':
					class_count['20'][6] += 1
				if res[0] == '45':
					class_count['20'][7] += 1
			if str(int(row['class'])) == '25':
				if res[0] == '10':
					class_count['25'][0] += 1
				if res[0] == '15':
					class_count['25'][1] += 1
				if res[0] == '20':
					class_count['25'][2] += 1
				if res[0] == '25':
					class_count['25'][3] += 1
				if res[0] == '30':
					class_count['25'][4] += 1
				if res[0] == '35':
					class_count['25'][5] += 1
				if res[0] == '40':
					class_count['25'][6] += 1
				if res[0] == '45':
					class_count['25'][7] += 1
			if str(int(row['class'])) == '30':
				if res[0] == '10':
					class_count['30'][0] += 1
				if res[0] == '15':
					class_count['30'][1] += 1
				if res[0] == '20':
					class_count['30'][2] += 1
				if res[0] == '25':
					class_count['30'][3] += 1
				if res[0] == '30':
					class_count['30'][4] += 1
				if res[0] == '35':
					class_count['30'][5] += 1
				if res[0] == '40':
					class_count['30'][6] += 1
				if res[0] == '45':
					class_count['30'][7] += 1
			if str(int(row['class'])) == '35':
				if res[0] == '10':
					class_count['35'][0] += 1
				if res[0] == '15':
					class_count['35'][1] += 1
				if res[0] == '20':
					class_count['35'][2] += 1
				if res[0] == '25':
					class_count['35'][3] += 1
				if res[0] == '30':
					class_count['35'][4] += 1
				if res[0] == '35':
					class_count['35'][5] += 1
				if res[0] == '40':
					class_count['35'][6] += 1
				if res[0] == '45':
					class_count['35'][7] += 1
			if str(int(row['class'])) == '40':
				if res[0] == '10':
					class_count['40'][0] += 1
				if res[0] == '15':
					class_count['40'][1] += 1
				if res[0] == '20':
					class_count['40'][2] += 1
				if res[0] == '25':
					class_count['40'][3] += 1
				if res[0] == '30':
					class_count['40'][4] += 1
				if res[0] == '35':
					class_count['40'][5] += 1
				if res[0] == '40':
					class_count['40'][6] += 1
				if res[0] == '45':
					class_count['40'][7] += 1
			if str(int(row['class'])) == '45':
				if res[0] == '10':
					class_count['45'][0] += 1
				if res[0] == '15':
					class_count['45'][1] += 1
				if res[0] == '20':
					class_count['45'][2] += 1
				if res[0] == '25':
					class_count['45'][3] += 1
				if res[0] == '30':
					class_count['45'][4] += 1
				if res[0] == '35':
					class_count['45'][5] += 1
				if res[0] == '40':
					class_count['45'][6] += 1
				if res[0] == '45':
					class_count['45'][7] += 1
			
	test_sum = 0
	c = 0
	col_sum = [0,0,0,0,0,0,0,0]
	for i in class_count:
		print(i + '\t\t' + str(class_count[i]))
		test_sum += class_count[i][c]
		col_sum[0] +=  class_count[i][0]
		col_sum[1] +=  class_count[i][1]
		col_sum[2] +=  class_count[i][2]
		col_sum[3] +=  class_count[i][3]
		col_sum[4] +=  class_count[i][4]
		col_sum[5] +=  class_count[i][5]
		col_sum[6] +=  class_count[i][6]
		col_sum[7] +=  class_count[i][7]
		c+=1
		
	total_sum = 0
	for i in class_t:
		total_sum += class_t[i]
		
	print(class_t)
	ac = test_sum / total_sum
	print("Accuracy: ", ac)

	kappa_count = {}

	kappa_count['10'] = [0,0,0,0,0,0,0,0]
	kappa_count['15'] = [0,0,0,0,0,0,0,0]
	kappa_count['20'] = [0,0,0,0,0,0,0,0]
	kappa_count['25'] = [0,0,0,0,0,0,0,0]
	kappa_count['30'] = [0,0,0,0,0,0,0,0]
	kappa_count['35'] = [0,0,0,0,0,0,0,0]
	kappa_count['40'] = [0,0,0,0,0,0,0,0]
	kappa_count['45'] = [0,0,0,0,0,0,0,0]


	for i in kappa_count:
		kappa_count[i][0] = round(( col_sum[0]/total_sum ) * class_t[i])
		kappa_count[i][1] = round(( col_sum[1]/total_sum ) * class_t[i])
		kappa_count[i][2] = round(( col_sum[2]/total_sum ) * class_t[i])
		kappa_count[i][3] = round(( col_sum[3]/total_sum ) * class_t[i])
		kappa_count[i][4] = round(( col_sum[4]/total_sum ) * class_t[i])
		kappa_count[i][5] = round(( col_sum[5]/total_sum ) * class_t[i])
		kappa_count[i][6] = round(( col_sum[6]/total_sum ) * class_t[i])
		kappa_count[i][7] = round(( col_sum[6]/total_sum ) * class_t[i])
	
	kappa_col = [0,0,0,0,0,0,0,0]
	ms = 0
	kappa_sum = 0
	for i in kappa_count:
		print(i + '\t\t' + str(kappa_count[i]))
		kappa_sum += kappa_count[i][ms]
		kappa_col[0] +=  kappa_count[i][0]
		kappa_col[1] +=  kappa_count[i][1]
		kappa_col[2] +=  kappa_count[i][2]
		kappa_col[3] +=  kappa_count[i][3]
		kappa_col[4] +=  kappa_count[i][4]
		kappa_col[5] +=  kappa_count[i][5]
		kappa_col[6] +=  kappa_count[i][6]
		kappa_col[7] +=  kappa_count[i][7]
		ms+=1
		
	acc = kappa_sum / sum(kappa_col)
	
	print("Kappa Score: ", (ac - acc) / (1 - acc) )

cross_validation("athletes")
#cross_validation_mpg("mpg")
#cross_validation_iris("iris")

"""
n nearest
pAPER
- resultados
- algoritmo
- arquitectura


10 cross_validation
matriz conf
%kappa

knn
rn
svm

iris
carros
papers

comparison 
"""





